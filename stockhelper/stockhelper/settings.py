"""
Django settings for stockhelper project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import dj_database_url
import dotenv
import os
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
IS_PROD = "DATABASE_URL" in os.environ

# Load the secret key as an environment variable from .env
# Ignore .env in prod (since environment variables should be set separately)
dotenv_file = BASE_DIR / ".env"
if os.path.isfile(dotenv_file) and not IS_PROD:
    dotenv.load_dotenv(dotenv_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'e*z=5=4f+f4oeqx1mnm(t(vf%6j1q)@v#%zs+)0k4!nq*r$or-'
if "SECRET_KEY" in os.environ:
    SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to false by default unless explicitly stated
DEBUG = os.environ.get("DEBUG", "false").lower() == "true"

# Trust localhost during development and Fly.io when deployed
ALLOWED_HOSTS = [".localhost", "127.0.0.1", "[::1]", "how-to-stock-3.fly.dev"]

# Required for POST requests in prod
CSRF_TRUSTED_ORIGINS = ["https://how-to-stock-3.fly.dev"]
SESSION_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    'stockapp.apps.StockappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = 'stockhelper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'stockhelper/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stockhelper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if IS_PROD:
    # Use the DATABASE_URL environment variable in prod
    # Don't require SSL connections for Fly Postgres
    DATABASES["default"] = dj_database_url.config(
        conn_max_age=600, ssl_require=False)


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'stockapp.User'
LOGIN_REDIRECT_URL = '/stockapp'  # go to the home page after logging in

# For development purposes, send emails to the console
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = '/static/'

# Add the project-level static files
STATICFILES_DIRS = [
    BASE_DIR / "stockhelper/static"
]

TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"
print(f"{TESTING=}")
print(f"{sys.argv=}")

"""if TESTING:
    # No need to run collectstatic while testing
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
else:
    # Enable WhiteNoise's Gzip compression of static assets
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"""

# Get emails from logs of class AdminEmailHandler
ADMINS = [("Abhishek Chaudhuri", "achaudhuri2011@yahoo.com")]

# Log all errors in production similar to debug mode
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}
